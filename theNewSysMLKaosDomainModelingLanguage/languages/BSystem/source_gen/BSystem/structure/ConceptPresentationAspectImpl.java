package BSystem.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Action;
  private ConceptPresentation props_BComment;
  private ConceptPresentation props_BSystemConcept;
  private ConceptPresentation props_Constant;
  private ConceptPresentation props_Context;
  private ConceptPresentation props_EnumeratedSet;
  private ConceptPresentation props_Invariant;
  private ConceptPresentation props_Predicate;
  private ConceptPresentation props_Property;
  private ConceptPresentation props_Set;
  private ConceptPresentation props_System;
  private ConceptPresentation props_Term;
  private ConceptPresentation props_Variable;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Action:
        if (props_Action == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Action = cpb.create();
        }
        return props_Action;
      case LanguageConceptSwitch.BComment:
        if (props_BComment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BComment = cpb.create();
        }
        return props_BComment;
      case LanguageConceptSwitch.BSystemConcept:
        if (props_BSystemConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BSystemConcept = cpb.create();
        }
        return props_BSystemConcept;
      case LanguageConceptSwitch.Constant:
        if (props_Constant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Constant = cpb.create();
        }
        return props_Constant;
      case LanguageConceptSwitch.Context:
        if (props_Context == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          cpb.icon(IconContainer.RESOURCE_a0a2a0a4b0o);
          props_Context = cpb.create();
        }
        return props_Context;
      case LanguageConceptSwitch.EnumeratedSet:
        if (props_EnumeratedSet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EnumeratedSet = cpb.create();
        }
        return props_EnumeratedSet;
      case LanguageConceptSwitch.Invariant:
        if (props_Invariant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Invariant = cpb.create();
        }
        return props_Invariant;
      case LanguageConceptSwitch.Predicate:
        if (props_Predicate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Predicate = cpb.create();
        }
        return props_Predicate;
      case LanguageConceptSwitch.Property:
        if (props_Property == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Property = cpb.create();
        }
        return props_Property;
      case LanguageConceptSwitch.Set:
        if (props_Set == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Set = cpb.create();
        }
        return props_Set;
      case LanguageConceptSwitch.System:
        if (props_System == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          cpb.icon(IconContainer.RESOURCE_a0a2a0a01b0o);
          props_System = cpb.create();
        }
        return props_System;
      case LanguageConceptSwitch.Term:
        if (props_Term == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Term = cpb.create();
        }
        return props_Term;
      case LanguageConceptSwitch.Variable:
        if (props_Variable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Variable = cpb.create();
        }
        return props_Variable;
    }
    return null;
  }
}
