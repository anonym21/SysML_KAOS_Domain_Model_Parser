package BSystem.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.model.SNode;
import org.apache.log4j.Level;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;

public class System_Constraints extends BaseConstraintsDescriptor {
  private static final Logger LOG = LogManager.getLogger(System_Constraints.class);
  public System_Constraints() {
    super(MetaAdapterFactory.getConcept(0xbe9c247ddd744e87L, 0x98fb8757587ebb62L, 0x47342804c19242e2L, "BSystem.structure.System"));
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(MetaAdapterFactory.getReferenceLink(0xbe9c247ddd744e87L, 0x98fb8757587ebb62L, 0x47342804c19242e2L, 0x47342804c1a3c401L, "refines"), new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0xbe9c247ddd744e87L, 0x98fb8757587ebb62L, 0x47342804c19242e2L, 0x47342804c1a3c401L), this) {
      @Override
      public boolean hasOwnOnReferenceSetHandler() {
        return true;
      }
      @Override
      public boolean validate(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode) {
        return true;
      }
      @Override
      public void onReferenceSet(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode) {
        if (referenceNode == newReferentNode) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LoggingRuntime.legacyLog(Level.ERROR, "the parent  model must be different from the current  model", System_Constraints.class, null);
          }
          SLinkOperations.setTarget(referenceNode, MetaAdapterFactory.getReferenceLink(0xbe9c247ddd744e87L, 0x98fb8757587ebb62L, 0x47342804c19242e2L, 0x47342804c1a3c401L, "refines"), oldReferentNode);
        }
        if ((SLinkOperations.getTarget(referenceNode, MetaAdapterFactory.getReferenceLink(0xbe9c247ddd744e87L, 0x98fb8757587ebb62L, 0x47342804c19242e2L, 0x47342804c1a3c401L, "refines")) != null)) {
          SPropertyOperations.set(referenceNode, MetaAdapterFactory.getProperty(0xbe9c247ddd744e87L, 0x98fb8757587ebb62L, 0x47342804c19242e2L, 0x157fb89c59aabed5L, "title"), "REFINEMENT ");
        }
        if ((SLinkOperations.getTarget(referenceNode, MetaAdapterFactory.getReferenceLink(0xbe9c247ddd744e87L, 0x98fb8757587ebb62L, 0x47342804c19242e2L, 0x47342804c1a3c401L, "refines")) == null)) {
          SPropertyOperations.set(referenceNode, MetaAdapterFactory.getProperty(0xbe9c247ddd744e87L, 0x98fb8757587ebb62L, 0x47342804c19242e2L, 0x157fb89c59aabed5L, "title"), "SYSTEM ");
        }

      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {};
      }
    });
    return references;
  }
}
