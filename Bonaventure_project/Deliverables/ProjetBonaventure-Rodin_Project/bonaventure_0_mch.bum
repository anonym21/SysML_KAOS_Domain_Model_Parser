<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.machineFile org.eventb.core.configuration="org.eventb.core.fwd;org.eventb.codegen.ui.cgConfig;de.prob.units.mchBase" org.eventb.core.generated="false" org.eventb.texttools.text_lastmodified="1544470721777" org.eventb.texttools.text_representation="machine bonaventure_0_mch sees bonaventure_0_ctxt&#10;&#10;variables Vehicle Vehicle_Front_Position Vehicle_Travel_Lane Speed_Limit Min_Brake_Distance&#10;&#10;invariants&#10;  @inv0_1 Vehicle ⊆ VEHICLE&#10;  @inv0_2 Vehicle_Front_Position ∈ Vehicle → Tunnel&#10;  @inv0_3 Vehicle_Travel_Lane ∈ Vehicle → TUNNEL_TRAVEL_LANE&#10;  @inv0_4 Speed_Limit ∈ Tunnel → ℕ&#10;  @inv0_5 Min_Brake_Distance ∈ ran(Speed_Limit) → ℕ&#10;  @p0_6 ∀ xx·((xx ∈ Vehicle ∧ Vehicle_Front_Position(xx)  ∈ Tunnel_part1)  ⇒ Vehicle_Travel_Lane(xx)  = TRAVEL_LANE_I)&#10;  @p0_8 ∀ xx·(xx ∈ dom(Visibility_Limit) ⇒ Visibility_Limit(xx)  − xx ≥ Min_Brake_Distance(Speed_Limit(xx) ) )&#10;  @p0_10 ∀xx1, xx2·((xx1 ∈ Vehicle ∧ xx2 ∈ Vehicle ∧ xx1 ≠ xx2)  ⇒ ((Vehicle_Front_Position(xx1)  − Vehicle_Length(xx1) ) ‥Vehicle_Front_Position(xx1)  ∩ (Vehicle_Front_Position(xx2)  − Vehicle_Length(xx2) ) ‥Vehicle_Front_Position(xx2)  =  ∅  ∨ Vehicle_Travel_Lane(xx1)  ≠ Vehicle_Travel_Lane(xx2) ) )&#10;&#10;events&#10;  event INITIALISATION // introduire un evenement de simulation pour l'entree des vehicules&#10;    then&#10;      @act1 Vehicle ≔ ∅&#10;      @act2 Vehicle_Front_Position ≔ ∅&#10;      @act3 Vehicle_Travel_Lane ≔ ∅&#10;      @act4 Speed_Limit ≔  Tunnel × {70}&#10;      @act5 Min_Brake_Distance ≔ {70 ↦0}&#10;  end&#10;&#10;  event ctrl_BringVehicleInsideTunnel&#10;    any vehicle front travelLane&#10;    where&#10;      @grd1 vehicle ∈ VEHICLE ∖ Vehicle&#10;      @grd2 front ∈ Tunnel&#10;      @grd3 travelLane ∈ TUNNEL_TRAVEL_LANE&#10;      @grd4 front  ∈ Tunnel_part1  ⇒ travelLane  = TRAVEL_LANE_I&#10;      @grd5 ∀xx·(xx ∈ Vehicle  ⇒ ((Vehicle_Front_Position(xx)  − Vehicle_Length(xx) ) ‥Vehicle_Front_Position(xx)  ∩ (front  − Vehicle_Length(vehicle) ) ‥front  =  ∅  ∨ Vehicle_Travel_Lane(xx)  ≠ travelLane ) )&#10;    then&#10;      @act1 Vehicle ≔ Vehicle ∪ {vehicle}&#10;      @act2 Vehicle_Front_Position(vehicle) ≔ front&#10;      @act3 Vehicle_Travel_Lane(vehicle) ≔ travelLane&#10;  end&#10;&#10;  event BringOutEachVehiclePresentInTunnel /*LA TACHE DE VERIFICATION SYSML/KAOS FAIT APPARAÎTRE QU'IL DOIT S'AGIR ICI D'UN RAFFINEMENT MILESTONE ET PAS AND*/&#10;    any Vehicle_Out Vehicle_In newVehicleFronts newTravelLanes&#10;    where&#10;      @grd0 Vehicle ≠ ∅&#10;      @grd1 partition(Vehicle, Vehicle_Out, Vehicle_In)&#10;      @grd2 newVehicleFronts ∈ Vehicle_In → Tunnel&#10;      @grd3 newTravelLanes ∈ Vehicle_In →TUNNEL_TRAVEL_LANE&#10;      @grd4 ∀ xx·((xx ∈ Vehicle_In ∧ newVehicleFronts(xx)  ∈ Tunnel_part1)  ⇒ newTravelLanes(xx)  = TRAVEL_LANE_I)&#10;      @grd5 ∀xx1, xx2·((xx1 ∈ Vehicle_In ∧ xx2 ∈ Vehicle_In ∧ xx1 ≠ xx2)  ⇒ ((newVehicleFronts(xx1)  − Vehicle_Length(xx1) ) ‥newVehicleFronts(xx1)  ∩ (newVehicleFronts(xx2)  − Vehicle_Length(xx2) ) ‥newVehicleFronts(xx2)  =  ∅  ∨ newTravelLanes(xx1)  ≠ newTravelLanes(xx2) ) )&#10;    then&#10;      @act1 Vehicle ≔ Vehicle ∖ Vehicle_Out&#10;      @act2 Vehicle_Front_Position ≔ newVehicleFronts&#10;      @act3 Vehicle_Travel_Lane ≔ newTravelLanes&#10;  end&#10;end&#10;" version="5">
<org.eventb.core.seesContext name="_GXvpcOhXEeiFb9vuOXZGkg" org.eventb.core.target="bonaventure_0_ctxt"/>
<org.eventb.core.event name="'" org.eventb.core.comment="introduire un evenement de simulation pour l'entree des vehicules" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="INITIALISATION">
<org.eventb.core.action name="'" org.eventb.core.assignment="Vehicle ≔ ∅" org.eventb.core.generated="false" org.eventb.core.label="act1"/>
<org.eventb.core.action name="(" org.eventb.core.assignment="Vehicle_Front_Position ≔ ∅" org.eventb.core.generated="false" org.eventb.core.label="act2"/>
<org.eventb.core.action name=")" org.eventb.core.assignment="Vehicle_Travel_Lane ≔ ∅" org.eventb.core.generated="false" org.eventb.core.label="act3"/>
<org.eventb.core.action name="*" org.eventb.core.assignment="Speed_Limit ≔  Tunnel × {70}" org.eventb.core.generated="false" org.eventb.core.label="act4"/>
<org.eventb.core.action name="+" org.eventb.core.assignment="Min_Brake_Distance ≔ {70 ↦0}" org.eventb.core.generated="false" org.eventb.core.label="act5"/>
</org.eventb.core.event>
<org.eventb.core.variable name="_NUnU8OhXEeiFb9vuOXZGkg" org.eventb.core.generated="false" org.eventb.core.identifier="Vehicle"/>
<org.eventb.core.variable name="_NUnU8uhXEeiFb9vuOXZGkg" org.eventb.core.generated="false" org.eventb.core.identifier="Vehicle_Front_Position"/>
<org.eventb.core.variable name="_NUnU8-hXEeiFb9vuOXZGkg" org.eventb.core.generated="false" org.eventb.core.identifier="Vehicle_Travel_Lane"/>
<org.eventb.core.variable name="_NUnU9OhXEeiFb9vuOXZGkg" org.eventb.core.generated="false" org.eventb.core.identifier="Speed_Limit"/>
<org.eventb.core.variable name="_NUnU9ehXEeiFb9vuOXZGkg" org.eventb.core.generated="false" org.eventb.core.identifier="Min_Brake_Distance"/>
<org.eventb.core.invariant name="_NUnU9uhXEeiFb9vuOXZGkh" org.eventb.core.generated="false" org.eventb.core.label="inv0_1" org.eventb.core.predicate="Vehicle ⊆ VEHICLE"/>
<org.eventb.core.invariant name="_NUnU9uhXEeiFb9vuOXZGki" org.eventb.core.generated="false" org.eventb.core.label="inv0_2" org.eventb.core.predicate="Vehicle_Front_Position ∈ Vehicle → Tunnel"/>
<org.eventb.core.invariant name="_NUnU9uhXEeiFb9vuOXZGkj" org.eventb.core.generated="false" org.eventb.core.label="inv0_3" org.eventb.core.predicate="Vehicle_Travel_Lane ∈ Vehicle → TUNNEL_TRAVEL_LANE"/>
<org.eventb.core.invariant name="_NUnU9uhXEeiFb9vuOXZGkk" org.eventb.core.generated="false" org.eventb.core.label="inv0_4" org.eventb.core.predicate="Speed_Limit ∈ Tunnel → ℕ"/>
<org.eventb.core.invariant name="_NUnU9uhXEeiFb9vuOXZGkl" org.eventb.core.generated="false" org.eventb.core.label="inv0_5" org.eventb.core.predicate="Min_Brake_Distance ∈ ran(Speed_Limit) → ℕ"/>
<org.eventb.core.invariant name="_NUnU9uhXEeiFb9vuOXZGkm" org.eventb.core.generated="false" org.eventb.core.label="p0_6" org.eventb.core.predicate="∀ xx·((xx ∈ Vehicle ∧ Vehicle_Front_Position(xx)  ∈ Tunnel_part1)  ⇒ Vehicle_Travel_Lane(xx)  = TRAVEL_LANE_I)"/>
<org.eventb.core.invariant name="_NUnU9uhXEeiFb9vuOXZGkn" org.eventb.core.generated="false" org.eventb.core.label="p0_8" org.eventb.core.predicate="∀ xx·(xx ∈ dom(Visibility_Limit) ⇒ Visibility_Limit(xx)  − xx ≥ Min_Brake_Distance(Speed_Limit(xx) ) )"/>
<org.eventb.core.invariant name="_NUnU9uhXEeiFb9vuOXZGko" org.eventb.core.generated="false" org.eventb.core.label="p0_10" org.eventb.core.predicate="∀xx1, xx2·((xx1 ∈ Vehicle ∧ xx2 ∈ Vehicle ∧ xx1 ≠ xx2)  ⇒ ((Vehicle_Front_Position(xx1)  − Vehicle_Length(xx1) ) ‥Vehicle_Front_Position(xx1)  ∩ (Vehicle_Front_Position(xx2)  − Vehicle_Length(xx2) ) ‥Vehicle_Front_Position(xx2)  =  ∅  ∨ Vehicle_Travel_Lane(xx1)  ≠ Vehicle_Travel_Lane(xx2) ) )"/>
<org.eventb.core.event name="_NUnU9uhXEeiFb9vuOXZGks" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="ctrl_BringVehicleInsideTunnel">
<org.eventb.core.parameter name="'" org.eventb.core.generated="false" org.eventb.core.identifier="vehicle"/>
<org.eventb.core.guard name="(" org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="vehicle ∈ VEHICLE ∖ Vehicle"/>
<org.eventb.core.parameter name=")" org.eventb.core.generated="false" org.eventb.core.identifier="front"/>
<org.eventb.core.parameter name="*" org.eventb.core.generated="false" org.eventb.core.identifier="travelLane"/>
<org.eventb.core.guard name="+" org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="front ∈ Tunnel"/>
<org.eventb.core.guard name="-" org.eventb.core.generated="false" org.eventb.core.label="grd3" org.eventb.core.predicate="travelLane ∈ TUNNEL_TRAVEL_LANE"/>
<org.eventb.core.guard name="." org.eventb.core.generated="false" org.eventb.core.label="grd4" org.eventb.core.predicate="front  ∈ Tunnel_part1  ⇒ travelLane  = TRAVEL_LANE_I"/>
<org.eventb.core.guard name="/" org.eventb.core.generated="false" org.eventb.core.label="grd5" org.eventb.core.predicate="∀xx·(xx ∈ Vehicle  ⇒ ((Vehicle_Front_Position(xx)  − Vehicle_Length(xx) ) ‥Vehicle_Front_Position(xx)  ∩ (front  − Vehicle_Length(vehicle) ) ‥front  =  ∅  ∨ Vehicle_Travel_Lane(xx)  ≠ travelLane ) )"/>
<org.eventb.core.action name="1" org.eventb.core.assignment="Vehicle ≔ Vehicle ∪ {vehicle}" org.eventb.core.generated="false" org.eventb.core.label="act1"/>
<org.eventb.core.action name="," org.eventb.core.assignment="Vehicle_Front_Position(vehicle) ≔ front" org.eventb.core.generated="false" org.eventb.core.label="act2"/>
<org.eventb.core.action name=")" org.eventb.core.assignment="Vehicle_Travel_Lane(vehicle) ≔ travelLane" org.eventb.core.generated="false" org.eventb.core.label="act3"/>
</org.eventb.core.event>
<org.eventb.core.event name="_bvuDUOzbEei2Zb4EspZEew" org.eventb.core.comment="LA TACHE DE VERIFICATION SYSML/KAOS FAIT APPARAÎTRE QU'IL DOIT S'AGIR ICI D'UN RAFFINEMENT MILESTONE ET PAS AND" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="BringOutEachVehiclePresentInTunnel">
<org.eventb.core.parameter name="," org.eventb.core.generated="false" org.eventb.core.identifier="Vehicle_Out"/>
<org.eventb.core.parameter name="'" org.eventb.core.generated="false" org.eventb.core.identifier="Vehicle_In"/>
<org.eventb.core.parameter name="_td-xIOkzEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.identifier="newVehicleFronts"/>
<org.eventb.core.parameter name="_td-xIekzEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.identifier="newTravelLanes"/>
<org.eventb.core.guard name="0" org.eventb.core.generated="false" org.eventb.core.label="grd0" org.eventb.core.predicate="Vehicle ≠ ∅"/>
<org.eventb.core.guard name="(" org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="partition(Vehicle, Vehicle_Out, Vehicle_In)"/>
<org.eventb.core.guard name="_td-xJOkzEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="newVehicleFronts ∈ Vehicle_In → Tunnel"/>
<org.eventb.core.guard name="_td_YMOkzEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.label="grd3" org.eventb.core.predicate="newTravelLanes ∈ Vehicle_In →TUNNEL_TRAVEL_LANE"/>
<org.eventb.core.guard name="_td_YMekzEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.label="grd4" org.eventb.core.predicate="∀ xx·((xx ∈ Vehicle_In ∧ newVehicleFronts(xx)  ∈ Tunnel_part1)  ⇒ newTravelLanes(xx)  = TRAVEL_LANE_I)"/>
<org.eventb.core.action name="*" org.eventb.core.assignment="Vehicle ≔ Vehicle ∖ Vehicle_Out" org.eventb.core.generated="false" org.eventb.core.label="act1"/>
<org.eventb.core.action name="_HiPvsO0jEeiJ5MssfLIKhw" org.eventb.core.assignment="Vehicle_Front_Position ≔ newVehicleFronts" org.eventb.core.generated="false" org.eventb.core.label="act2"/>
<org.eventb.core.action name="_HiPvse0jEeiJ5MssfLIKhw" org.eventb.core.assignment="Vehicle_Travel_Lane ≔ newTravelLanes" org.eventb.core.generated="false" org.eventb.core.label="act3"/>
<org.eventb.core.guard name="_NkUisO0qEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.label="grd5" org.eventb.core.predicate="∀xx1, xx2·((xx1 ∈ Vehicle_In ∧ xx2 ∈ Vehicle_In ∧ xx1 ≠ xx2)  ⇒ ((newVehicleFronts(xx1)  − Vehicle_Length(xx1) ) ‥newVehicleFronts(xx1)  ∩ (newVehicleFronts(xx2)  − Vehicle_Length(xx2) ) ‥newVehicleFronts(xx2)  =  ∅  ∨ newTravelLanes(xx1)  ≠ newTravelLanes(xx2) ) )"/>
</org.eventb.core.event>
</org.eventb.core.machineFile>
