<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.machineFile org.eventb.core.configuration="org.eventb.core.fwd;org.eventb.codegen.ui.cgConfig;de.prob.units.mchBase" org.eventb.core.generated="false" org.eventb.texttools.text_lastmodified="1545090239829" org.eventb.texttools.text_representation="machine bonaventure_1_mch refines bonaventure_0_mch  sees bonaventure_1_ctxt&#10;&#10;variables Vehicle Vehicle_Front_Position  Vehicle_Travel_Lane Speed_Limit Min_Brake_Distance traffic_level Vehicle_Speed&#10;&#10;invariants&#10;  @inv1_1 traffic_level ∈ TRAFFIC_LEVEL&#10;  @inv1_2 Vehicle_Speed ∈ Vehicle → ℕ&#10;  @p1_1 ∀ xx·(xx ∈ Vehicle ⇒ Vehicle_Speed(xx)  ≤ Speed_Limit(Vehicle_Front_Position(xx) ) )&#10;  @p1_2 (traffic_level = NORMAL ⇒ (((card(Vehicle) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION)  &lt; 40 ∧ ( ∀xx·(xx ∈ Vehicle ⇒ Vehicle_Speed(xx)  ≥ 40) ) ) )&#10;  @p1_3 (traffic_level = DENSE ⇒ (((card(Vehicle) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION)  &lt; 40 ∧ ( ∀xx·(xx ∈ Vehicle ⇒ Vehicle_Speed(xx)  ∈ 35‥39) ) ) )&#10;  @p1_4 (traffic_level = SLOWED ⇒ (((card(Vehicle) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION)  &gt; 40 ∧ ( ∀xx·(xx ∈ Vehicle ⇒ Vehicle_Speed(xx)  ∈ 25‥34) ) ) )&#10;  @p1_5 (traffic_level = CONGESTION ⇒ (((card(Vehicle) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION)  &gt; 40 ∧ ( ∀xx·(xx ∈ Vehicle ⇒ Vehicle_Speed(xx)  &lt; 15) ) ) )&#10;  /* @sysmlkaos_(MoveVehicle_Guard=&gt;BringOutEachVehiclePresentInTunnel_Guard) : prouvé par le raffinement classique Event-B*/&#10;  theorem @sysmlkaos_(MoveVehicle_Post=&gt;ManageCongestion_Guard)  ∀delay,newTravelLanes,updatedVehicleFronts,newVehicleSpeeds,Vehicle_Out,Vehicle_In,&#10;  trafficLevel,newVehicleFronts·(&#10;  &#9;&#9;&#9;(&#10;&#9;  &#9;&#9;&#9;delay ∈ ℕ1&#10;&#9;  &#9;&#9;&#9;∧ Vehicle ≠ ∅&#10;&#9;      &#9;&#9;∧ updatedVehicleFronts = (λxx·xx∈Vehicle∣Vehicle_Front_Position(xx)+Vehicle_Speed(xx)∗delay)&#10;&#9;      &#9;&#9;∧ Vehicle_In = updatedVehicleFronts∼[Tunnel]&#10;&#9;      &#9;&#9;∧ Vehicle_Out = Vehicle∖  Vehicle_In&#10;&#9;      &#9;&#9;∧ newVehicleSpeeds ∈ Vehicle_In → ℕ&#10;&#9;      &#9;&#9;∧ (∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx) ∈ 0‥Speed_Limit(updatedVehicleFronts(xx))))&#10;&#9;      &#9;&#9;∧ newTravelLanes ∈ Vehicle_In →TUNNEL_TRAVEL_LANE&#10;&#9;      &#9;&#9;∧ newVehicleFronts = Vehicle_Out⩤updatedVehicleFronts&#10;&#9;      &#9;&#9;∧ trafficLevel ∈ TRAFFIC_LEVEL&#10;&#9;      &#9;&#9;∧ (trafficLevel = NORMAL ⇒ (((card(Vehicle_In) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION)  &lt; 40 ∧ ( ∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx)  ≥ 40) ) ) )&#10;&#9;      &#9;&#9;∧ (trafficLevel = DENSE ⇒ (((card(Vehicle_In) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION)  &lt; 40 ∧ ( ∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx)  ∈ 35‥39) ) ) )&#10;&#9;      &#9;&#9;∧ (trafficLevel = SLOWED ⇒ (((card(Vehicle_In) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION)  &gt; 40 ∧ ( ∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx)  ∈ 25‥34) ) ) )&#10;&#9;      &#9;&#9;∧ (trafficLevel = CONGESTION ⇒ (((card(Vehicle_In) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION)  &gt; 40 ∧ ( ∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx)  &lt; 15) ) ) )&#10;&#9;      &#9;&#9;∧ (∀ xx·((xx ∈ Vehicle_In ∧ newVehicleFronts(xx)  ∈ Tunnel_part1)  ⇒ newTravelLanes(xx)  = TRAVEL_LANE_I))&#10;&#9;      &#9;&#9;∧ (∀xx1, xx2·((xx1 ∈ Vehicle_In ∧ xx2 ∈ Vehicle_In ∧ xx1 ≠ xx2)  ⇒ ((newVehicleFronts(xx1)  − Vehicle_Length(xx1) ) ‥newVehicleFronts(xx1)  ∩ (newVehicleFronts(xx2)  − Vehicle_Length(xx2) ) ‥newVehicleFronts(xx2)  =  ∅  ∨ newTravelLanes(xx1)  ≠ newTravelLanes(xx2) ) ))&#10;&#9;      &#9;)&#10;      &#9;&#9;⇒ (TRUE=TRUE))&#10;  /* @sysmlkaos_(ManageCongestion_Post=&gt;BringOutEachVehiclePresentInTunnel_Post) : prouvé par le raffinement classique Event-B, car ManageCongestion préserve la post-condition de MoveVehicle.&#10;   ON PEUT CONSTATER QUE SANS LE BUT MoveVehicle, IL N'AURAIT PAS ÉTÉ POSSIBLE DE SATISFAIRE BringOutEachVehiclePresentInTunnel ET LES PREUVES SYSML/KAOS AURAIENT PERMIS DE DETECTER CET ETAT DE FAITS */&#10;&#10;events&#10;  event INITIALISATION extends INITIALISATION&#10;    then&#10;      @act7 traffic_level ≔ NORMAL&#10;      @act8 Vehicle_Speed ≔ ∅&#10;  end&#10;&#10;  event  ctrl_BringVehicleInsideTunnel extends  ctrl_BringVehicleInsideTunnel&#10;   any speed trafficLevel&#10;    where&#10;      @grd6 speed ∈ 0‥Speed_Limit(front)&#10;      @grd7 trafficLevel ∈ TRAFFIC_LEVEL&#10;      @grd8 trafficLevel = NORMAL ⇒  ((((card(Vehicle)+1) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;      )  &lt; 40 ∧speed  ≥ 40 ∧ ( ∀xx·(xx ∈ Vehicle ⇒ Vehicle_Speed(xx)  ≥ 40) ))&#10;&#9;  @grd9 trafficLevel = DENSE ⇒  ((((card(Vehicle)+1) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;&#9;  )  &lt; 40 ∧speed  ∈ 35‥39 ∧ ( ∀xx·(xx ∈ Vehicle ⇒ Vehicle_Speed(xx)  ∈ 35‥39) ))&#10;&#9;  @grd10 trafficLevel = SLOWED ⇒  ((((card(Vehicle)+1) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;&#9;  )  &gt; 40 ∧ speed  ∈ 25‥34 ∧ ( ∀xx·(xx ∈ Vehicle ⇒ Vehicle_Speed(xx)  ∈ 25‥34) ))&#10;&#9;  @grd11 trafficLevel = CONGESTION ⇒  ((((card(Vehicle)+1) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;&#9;  )  &gt; 40 ∧ speed  &lt; 15 ∧ ( ∀xx·(xx ∈ Vehicle ⇒ Vehicle_Speed(xx)  &lt; 15) ))&#10;    then&#10;      @act4 Vehicle_Speed(vehicle) ≔ speed&#10;      @act5 traffic_level ≔  trafficLevel&#10;  end&#10;&#10;  event ctrl_ChangeSpeed&#10;    any vehicle speed trafficLevel&#10;    where&#10;      @grd1 vehicle ∈  Vehicle&#10;      @grd2 speed ∈ 0‥Speed_Limit(Vehicle_Front_Position(vehicle))∖{Vehicle_Speed(vehicle)}&#10;      @grd3 trafficLevel ∈ TRAFFIC_LEVEL&#10;      @grd4 trafficLevel = NORMAL ⇒  (((card(Vehicle) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;      )  &lt; 40 ∧speed  ≥ 40 ∧ ( ∀xx·(xx ∈ Vehicle∖{vehicle} ⇒ Vehicle_Speed(xx)  ≥ 40) ))&#10;&#9;  @grd5 trafficLevel = DENSE ⇒  (((card(Vehicle) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;&#9;  )  &lt; 40 ∧speed  ∈ 35‥39 ∧ ( ∀xx·(xx ∈ Vehicle∖{vehicle} ⇒ Vehicle_Speed(xx)  ∈ 35‥39) ))&#10;&#9;  @grd6 trafficLevel = SLOWED ⇒  (((card(Vehicle) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;&#9;  )  &gt; 40 ∧ speed  ∈ 25‥34 ∧ ( ∀xx·(xx ∈ Vehicle∖{vehicle} ⇒ Vehicle_Speed(xx)  ∈ 25‥34) ))&#10;&#9;  @grd7 trafficLevel = CONGESTION ⇒  (((card(Vehicle) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;&#9;  )  &gt; 40 ∧ speed  &lt; 15 ∧ ( ∀xx·(xx ∈ Vehicle∖{vehicle} ⇒ Vehicle_Speed(xx)  &lt; 15) ))&#10;&#10;    then&#10;      @act1 Vehicle_Speed(vehicle) ≔ speed&#10;      @act2 traffic_level ≔  trafficLevel&#10;  end&#10;&#10;  event MoveVehicle refines BringOutEachVehiclePresentInTunnel&#10;    any delay newTravelLanes updatedVehicleFronts  newVehicleSpeeds Vehicle_Out Vehicle_In trafficLevel newVehicleFronts&#10;    where&#10;      @grd0 delay ∈ ℕ1&#10;      @grd01 Vehicle ≠ ∅&#10;      @grd1 updatedVehicleFronts = (λxx·xx∈Vehicle∣Vehicle_Front_Position(xx)+Vehicle_Speed(xx)∗delay) //les prouveurs ont beaucoup de mal avec ce type de definition: il est necessaire a chaque fois d'expliciter le resultat ou de donner le superset dans le cas de la cardinalite&#10;      @grd2 Vehicle_In = updatedVehicleFronts∼[Tunnel]&#10;      @grd3 Vehicle_Out = Vehicle∖  Vehicle_In&#10;      @grd4 newVehicleSpeeds ∈ Vehicle_In → ℕ&#10;      @grd5 ∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx) ∈ 0‥Speed_Limit(updatedVehicleFronts(xx)))&#10;      @grd6 newTravelLanes ∈ Vehicle_In →TUNNEL_TRAVEL_LANE&#10;      @grd7 newVehicleFronts = Vehicle_Out⩤updatedVehicleFronts&#10;      @grd8 trafficLevel ∈ TRAFFIC_LEVEL&#10;      @grd9 (trafficLevel = NORMAL ⇒ (((card(Vehicle_In) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;      )  &lt; 40 ∧ ( ∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx)  ≥ 40) ) ) )&#10;      @grd10 (trafficLevel = DENSE ⇒ (((card(Vehicle_In) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;      )  &lt; 40 ∧ ( ∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx)  ∈ 35‥39) ) ) )&#10;      @grd11 (trafficLevel = SLOWED ⇒ (((card(Vehicle_In) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;      )  &gt; 40 ∧ ( ∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx)  ∈ 25‥34) ) ) )&#10;      @grd12 (trafficLevel = CONGESTION ⇒ (((card(Vehicle_In) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;      )  &gt; 40 ∧ ( ∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx)  &lt; 15) ) ) )&#10;      @grd13 ∀ xx·((xx ∈ Vehicle_In ∧ newVehicleFronts(xx)  ∈ Tunnel_part1)  ⇒ newTravelLanes(xx)  = TRAVEL_LANE_I)&#10;&#9;  @grd14 ∀xx1, xx2·((xx1 ∈ Vehicle_In ∧ xx2 ∈ Vehicle_In ∧ xx1 ≠ xx2)  ⇒ ((newVehicleFronts(xx1)  − Vehicle_Length(xx1) ) ‥newVehicleFronts(xx1)  ∩ (newVehicleFronts(xx2)  − Vehicle_Length(xx2) ) ‥newVehicleFronts(xx2)  =  ∅  ∨ newTravelLanes(xx1)  ≠ newTravelLanes(xx2) ) )&#10;    then&#10;      @act1 Vehicle ≔Vehicle_In&#10;      @act2 Vehicle_Front_Position ≔ newVehicleFronts&#10;      @act3 Vehicle_Travel_Lane ≔ newTravelLanes&#10;      @act4 traffic_level ≔  trafficLevel&#10;      @act5 Vehicle_Speed ≔ newVehicleSpeeds&#10;  end&#10;&#10;  event ManageCongestion&#10;  end&#10;end&#10;" version="5">
<org.eventb.core.refinesMachine name="'" org.eventb.core.target="bonaventure_0_mch"/>
<org.eventb.core.seesContext name="_uNirAOkhEei2Zb4EspZEew" org.eventb.core.target="bonaventure_1_ctxt"/>
<org.eventb.core.variable name="_NUnU8OhXEeiFb9vuOXZGkg" org.eventb.core.generated="false" org.eventb.core.identifier="Vehicle"/>
<org.eventb.core.variable name="_NUnU8uhXEeiFb9vuOXZGkg" org.eventb.core.generated="false" org.eventb.core.identifier="Vehicle_Front_Position"/>
<org.eventb.core.variable name="_NUnU8-hXEeiFb9vuOXZGkg" org.eventb.core.generated="false" org.eventb.core.identifier="Vehicle_Travel_Lane"/>
<org.eventb.core.variable name="_NUnU9OhXEeiFb9vuOXZGkg" org.eventb.core.generated="false" org.eventb.core.identifier="Speed_Limit"/>
<org.eventb.core.variable name="_NUnU9ehXEeiFb9vuOXZGkg" org.eventb.core.generated="false" org.eventb.core.identifier="Min_Brake_Distance"/>
<org.eventb.core.variable name="_NUnU9uhXEeiFb9vuOXZGkg" org.eventb.core.generated="false" org.eventb.core.identifier="traffic_level"/>
<org.eventb.core.event name="_NUnU9uhXEeiFb9vuOXZGkh" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.generated="false" org.eventb.core.label="INITIALISATION">
<org.eventb.core.action name="'" org.eventb.core.assignment="traffic_level ≔ NORMAL" org.eventb.core.generated="false" org.eventb.core.label="act7"/>
<org.eventb.core.action name="(" org.eventb.core.assignment="Vehicle_Speed ≔ ∅" org.eventb.core.generated="false" org.eventb.core.label="act8"/>
</org.eventb.core.event>
<org.eventb.core.event name="_NUnU9uhXEeiFb9vuOXZGki" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.generated="false" org.eventb.core.label="ctrl_BringVehicleInsideTunnel">
<org.eventb.core.refinesEvent name="_vY8igO0kEeiJ5MssfLIKhw" org.eventb.core.target="ctrl_BringVehicleInsideTunnel"/>
<org.eventb.core.parameter name="(" org.eventb.core.generated="false" org.eventb.core.identifier="speed"/>
<org.eventb.core.parameter name=")" org.eventb.core.generated="false" org.eventb.core.identifier="trafficLevel"/>
<org.eventb.core.guard name="*" org.eventb.core.generated="false" org.eventb.core.label="grd6" org.eventb.core.predicate="speed ∈ 0‥Speed_Limit(front)"/>
<org.eventb.core.guard name="+" org.eventb.core.generated="false" org.eventb.core.label="grd7" org.eventb.core.predicate="trafficLevel ∈ TRAFFIC_LEVEL"/>
<org.eventb.core.action name="," org.eventb.core.assignment="Vehicle_Speed(vehicle) ≔ speed" org.eventb.core.generated="false" org.eventb.core.label="act4"/>
<org.eventb.core.guard name="_A0Oy8ekaEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.label="grd8" org.eventb.core.predicate="trafficLevel = NORMAL ⇒  ((((card(Vehicle)+1) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;      )  &lt; 40 ∧speed  ≥ 40 ∧ ( ∀xx·(xx ∈ Vehicle ⇒ Vehicle_Speed(xx)  ≥ 40) ))"/>
<org.eventb.core.action name="_A0Oy8ukaEei2Zb4EspZEew" org.eventb.core.assignment="traffic_level ≔  trafficLevel" org.eventb.core.generated="false" org.eventb.core.label="act5"/>
<org.eventb.core.guard name="_4fITwekaEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.label="grd9" org.eventb.core.predicate="trafficLevel = DENSE ⇒  ((((card(Vehicle)+1) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;&#9;  )  &lt; 40 ∧speed  ∈ 35‥39 ∧ ( ∀xx·(xx ∈ Vehicle ⇒ Vehicle_Speed(xx)  ∈ 35‥39) ))"/>
<org.eventb.core.guard name="_uNj5IOkhEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.label="grd10" org.eventb.core.predicate="trafficLevel = SLOWED ⇒  ((((card(Vehicle)+1) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;&#9;  )  &gt; 40 ∧ speed  ∈ 25‥34 ∧ ( ∀xx·(xx ∈ Vehicle ⇒ Vehicle_Speed(xx)  ∈ 25‥34) ))"/>
<org.eventb.core.guard name="_uNj5IekhEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.label="grd11" org.eventb.core.predicate="trafficLevel = CONGESTION ⇒  ((((card(Vehicle)+1) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;&#9;  )  &gt; 40 ∧ speed  &lt; 15 ∧ ( ∀xx·(xx ∈ Vehicle ⇒ Vehicle_Speed(xx)  &lt; 15) ))"/>
</org.eventb.core.event>
<org.eventb.core.variable name="_xuCWQOkhEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.identifier="Vehicle_Speed"/>
<org.eventb.core.invariant name="_xuCWQekhEei2Zb4EspZEex" org.eventb.core.generated="false" org.eventb.core.label="inv1_1" org.eventb.core.predicate="traffic_level ∈ TRAFFIC_LEVEL"/>
<org.eventb.core.invariant name="_xuCWQekhEei2Zb4EspZEey" org.eventb.core.generated="false" org.eventb.core.label="inv1_2" org.eventb.core.predicate="Vehicle_Speed ∈ Vehicle → ℕ"/>
<org.eventb.core.invariant name="_xuCWQekhEei2Zb4EspZEez" org.eventb.core.generated="false" org.eventb.core.label="p1_1" org.eventb.core.predicate="∀ xx·(xx ∈ Vehicle ⇒ Vehicle_Speed(xx)  ≤ Speed_Limit(Vehicle_Front_Position(xx) ) )"/>
<org.eventb.core.invariant name="_xuCWQekhEei2Zb4EspZEe{" org.eventb.core.generated="false" org.eventb.core.label="p1_2" org.eventb.core.predicate="(traffic_level = NORMAL ⇒ (((card(Vehicle) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION)  &lt; 40 ∧ ( ∀xx·(xx ∈ Vehicle ⇒ Vehicle_Speed(xx)  ≥ 40) ) ) )"/>
<org.eventb.core.invariant name="_xuCWQekhEei2Zb4EspZEe|" org.eventb.core.generated="false" org.eventb.core.label="p1_3" org.eventb.core.predicate="(traffic_level = DENSE ⇒ (((card(Vehicle) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION)  &lt; 40 ∧ ( ∀xx·(xx ∈ Vehicle ⇒ Vehicle_Speed(xx)  ∈ 35‥39) ) ) )"/>
<org.eventb.core.invariant name="_xuCWQekhEei2Zb4EspZEe}" org.eventb.core.generated="false" org.eventb.core.label="p1_4" org.eventb.core.predicate="(traffic_level = SLOWED ⇒ (((card(Vehicle) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION)  &gt; 40 ∧ ( ∀xx·(xx ∈ Vehicle ⇒ Vehicle_Speed(xx)  ∈ 25‥34) ) ) )"/>
<org.eventb.core.invariant name="_xuCWQekhEei2Zb4EspZEe~" org.eventb.core.comment="@sysmlkaos_(MoveVehicle_Guard=&gt;BringOutEachVehiclePresentInTunnel_Guard) : prouvé par le raffinement classique Event-B" org.eventb.core.generated="false" org.eventb.core.label="p1_5" org.eventb.core.predicate="(traffic_level = CONGESTION ⇒ (((card(Vehicle) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION)  &gt; 40 ∧ ( ∀xx·(xx ∈ Vehicle ⇒ Vehicle_Speed(xx)  &lt; 15) ) ) )"/>
<org.eventb.core.event name="_xuCWQekhEei2Zb4EspZEf'" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="ctrl_ChangeSpeed">
<org.eventb.core.parameter name="_A0Oy8OkaEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.identifier="vehicle"/>
<org.eventb.core.parameter name="_4fITwOkaEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.identifier="speed"/>
<org.eventb.core.parameter name="_lcousOkkEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.identifier="trafficLevel"/>
<org.eventb.core.guard name="_pp2EEukmEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="vehicle ∈  Vehicle"/>
<org.eventb.core.guard name="_pp2EE-kmEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="speed ∈ 0‥Speed_Limit(Vehicle_Front_Position(vehicle))∖{Vehicle_Speed(vehicle)}"/>
<org.eventb.core.guard name="_pp2EFOkmEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.label="grd3" org.eventb.core.predicate="trafficLevel ∈ TRAFFIC_LEVEL"/>
<org.eventb.core.guard name="_pp2rIOkmEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.label="grd4" org.eventb.core.predicate="trafficLevel = NORMAL ⇒  (((card(Vehicle) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;      )  &lt; 40 ∧speed  ≥ 40 ∧ ( ∀xx·(xx ∈ Vehicle∖{vehicle} ⇒ Vehicle_Speed(xx)  ≥ 40) ))"/>
<org.eventb.core.guard name="_pp2rIekmEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.label="grd5" org.eventb.core.predicate="trafficLevel = DENSE ⇒  (((card(Vehicle) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;&#9;  )  &lt; 40 ∧speed  ∈ 35‥39 ∧ ( ∀xx·(xx ∈ Vehicle∖{vehicle} ⇒ Vehicle_Speed(xx)  ∈ 35‥39) ))"/>
<org.eventb.core.guard name="_pp2rIukmEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.label="grd6" org.eventb.core.predicate="trafficLevel = SLOWED ⇒  (((card(Vehicle) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;&#9;  )  &gt; 40 ∧ speed  ∈ 25‥34 ∧ ( ∀xx·(xx ∈ Vehicle∖{vehicle} ⇒ Vehicle_Speed(xx)  ∈ 25‥34) ))"/>
<org.eventb.core.guard name="_LyxI0ek1Eei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.label="grd7" org.eventb.core.predicate="trafficLevel = CONGESTION ⇒  (((card(Vehicle) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;&#9;  )  &gt; 40 ∧ speed  &lt; 15 ∧ ( ∀xx·(xx ∈ Vehicle∖{vehicle} ⇒ Vehicle_Speed(xx)  &lt; 15) ))"/>
<org.eventb.core.action name="_A0Oy8-kaEei2Zb4EspZEew" org.eventb.core.assignment="Vehicle_Speed(vehicle) ≔ speed" org.eventb.core.generated="false" org.eventb.core.label="act1"/>
<org.eventb.core.action name="_A0Oy9OkaEei2Zb4EspZEew" org.eventb.core.assignment="traffic_level ≔  trafficLevel" org.eventb.core.generated="false" org.eventb.core.label="act2"/>
</org.eventb.core.event>
<org.eventb.core.event name="_MBgwUO0jEeiJ5MssfLIKhw" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="MoveVehicle">
<org.eventb.core.refinesEvent name="_vY9woO0kEeiJ5MssfLIKhw" org.eventb.core.target="BringOutEachVehiclePresentInTunnel"/>
<org.eventb.core.parameter name="_lcousekkEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.identifier="delay"/>
<org.eventb.core.parameter name="_pp2EEOkmEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.identifier="newTravelLanes"/>
<org.eventb.core.parameter name="_pp2EEekmEei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.identifier="updatedVehicleFronts"/>
<org.eventb.core.parameter name="_vY9woe0kEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.identifier="newVehicleSpeeds"/>
<org.eventb.core.parameter name="_vY9wou0kEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.identifier="Vehicle_Out"/>
<org.eventb.core.parameter name="_vY-XsO0kEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.identifier="Vehicle_In"/>
<org.eventb.core.parameter name="_9SwVgO0lEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.identifier="trafficLevel"/>
<org.eventb.core.parameter name="_9SwVge0lEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.identifier="newVehicleFronts"/>
<org.eventb.core.guard name="_LyxI0uk1Eei2Zb4EspZEew" org.eventb.core.generated="false" org.eventb.core.label="grd0" org.eventb.core.predicate="delay ∈ ℕ1"/>
<org.eventb.core.guard name="_5dDN4OzmEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.label="grd01" org.eventb.core.predicate="Vehicle ≠ ∅"/>
<org.eventb.core.guard name="_vY--wO0kEeiJ5MssfLIKhw" org.eventb.core.comment="les prouveurs ont beaucoup de mal avec ce type de definition: il est necessaire a chaque fois d'expliciter le resultat ou de donner le superset dans le cas de la cardinalite" org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="updatedVehicleFronts = (λxx·xx∈Vehicle∣Vehicle_Front_Position(xx)+Vehicle_Speed(xx)∗delay)"/>
<org.eventb.core.guard name="_vY--we0kEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="Vehicle_In = updatedVehicleFronts∼[Tunnel]"/>
<org.eventb.core.guard name="_vY--wu0kEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.label="grd3" org.eventb.core.predicate="Vehicle_Out = Vehicle∖  Vehicle_In"/>
<org.eventb.core.guard name="_vY--w-0kEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.label="grd4" org.eventb.core.predicate="newVehicleSpeeds ∈ Vehicle_In → ℕ"/>
<org.eventb.core.guard name="_vY--xO0kEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.label="grd5" org.eventb.core.predicate="∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx) ∈ 0‥Speed_Limit(updatedVehicleFronts(xx)))"/>
<org.eventb.core.guard name="_vY--xe0kEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.label="grd6" org.eventb.core.predicate="newTravelLanes ∈ Vehicle_In →TUNNEL_TRAVEL_LANE"/>
<org.eventb.core.guard name="_vY--xu0kEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.label="grd7" org.eventb.core.predicate="newVehicleFronts = Vehicle_Out⩤updatedVehicleFronts"/>
<org.eventb.core.guard name="_9Sw8kO0lEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.label="grd8" org.eventb.core.predicate="trafficLevel ∈ TRAFFIC_LEVEL"/>
<org.eventb.core.guard name="_9Sw8ke0lEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.label="grd9" org.eventb.core.predicate="(trafficLevel = NORMAL ⇒ (((card(Vehicle_In) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;      )  &lt; 40 ∧ ( ∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx)  ≥ 40) ) ) )"/>
<org.eventb.core.guard name="_9Sw8ku0lEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.label="grd10" org.eventb.core.predicate="(trafficLevel = DENSE ⇒ (((card(Vehicle_In) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;      )  &lt; 40 ∧ ( ∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx)  ∈ 35‥39) ) ) )"/>
<org.eventb.core.guard name="_9Sw8k-0lEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.label="grd11" org.eventb.core.predicate="(trafficLevel = SLOWED ⇒ (((card(Vehicle_In) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;      )  &gt; 40 ∧ ( ∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx)  ∈ 25‥34) ) ) )"/>
<org.eventb.core.guard name="_9Sw8lO0lEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.label="grd12" org.eventb.core.predicate="(trafficLevel = CONGESTION ⇒ (((card(Vehicle_In) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION&#10;      )  &gt; 40 ∧ ( ∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx)  &lt; 15) ) ) )"/>
<org.eventb.core.guard name="_9Sw8le0lEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.label="grd13" org.eventb.core.predicate="∀ xx·((xx ∈ Vehicle_In ∧ newVehicleFronts(xx)  ∈ Tunnel_part1)  ⇒ newTravelLanes(xx)  = TRAVEL_LANE_I)"/>
<org.eventb.core.guard name="_ZXxioO0qEeiJ5MssfLIKhw" org.eventb.core.generated="false" org.eventb.core.label="grd14" org.eventb.core.predicate="∀xx1, xx2·((xx1 ∈ Vehicle_In ∧ xx2 ∈ Vehicle_In ∧ xx1 ≠ xx2)  ⇒ ((newVehicleFronts(xx1)  − Vehicle_Length(xx1) ) ‥newVehicleFronts(xx1)  ∩ (newVehicleFronts(xx2)  − Vehicle_Length(xx2) ) ‥newVehicleFronts(xx2)  =  ∅  ∨ newTravelLanes(xx1)  ≠ newTravelLanes(xx2) ) )"/>
<org.eventb.core.action name="_pp2rI-kmEei2Zb4EspZEew" org.eventb.core.assignment="Vehicle ≔Vehicle_In" org.eventb.core.generated="false" org.eventb.core.label="act1"/>
<org.eventb.core.action name="_vY_l0O0kEeiJ5MssfLIKhw" org.eventb.core.assignment="Vehicle_Front_Position ≔ newVehicleFronts" org.eventb.core.generated="false" org.eventb.core.label="act2"/>
<org.eventb.core.action name="_9SxjoO0lEeiJ5MssfLIKhw" org.eventb.core.assignment="Vehicle_Travel_Lane ≔ newTravelLanes" org.eventb.core.generated="false" org.eventb.core.label="act3"/>
<org.eventb.core.action name="_9Sxjoe0lEeiJ5MssfLIKhw" org.eventb.core.assignment="traffic_level ≔  trafficLevel" org.eventb.core.generated="false" org.eventb.core.label="act4"/>
<org.eventb.core.action name="_9Sxjou0lEeiJ5MssfLIKhw" org.eventb.core.assignment="Vehicle_Speed ≔ newVehicleSpeeds" org.eventb.core.generated="false" org.eventb.core.label="act5"/>
</org.eventb.core.event>
<org.eventb.core.event name="_vY_l0e0kEeiJ5MssfLIKhw" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="ManageCongestion"/>
<org.eventb.core.invariant name="_NfitUPy1EeiDfsaie0O57A" org.eventb.core.comment="@sysmlkaos_(ManageCongestion_Post=&gt;BringOutEachVehiclePresentInTunnel_Post) : prouvé par le raffinement classique Event-B, car ManageCongestion préserve la post-condition de MoveVehicle.&#10;   ON PEUT CONSTATER QUE SANS LE BUT MoveVehicle, IL N'AURAIT PAS ÉTÉ POSSIBLE DE SATISFAIRE BringOutEachVehiclePresentInTunnel ET LES PREUVES SYSML/KAOS AURAIENT PERMIS DE DETECTER CET ETAT DE FAITS " org.eventb.core.generated="false" org.eventb.core.label="sysmlkaos_(MoveVehicle_Post=&gt;ManageCongestion_Guard)" org.eventb.core.predicate="∀delay,newTravelLanes,updatedVehicleFronts,newVehicleSpeeds,Vehicle_Out,Vehicle_In,&#10;  trafficLevel,newVehicleFronts·(&#10;  &#9;&#9;&#9;(&#10;&#9;  &#9;&#9;&#9;delay ∈ ℕ1&#10;&#9;  &#9;&#9;&#9;∧ Vehicle ≠ ∅&#10;&#9;      &#9;&#9;∧ updatedVehicleFronts = (λxx·xx∈Vehicle∣Vehicle_Front_Position(xx)+Vehicle_Speed(xx)∗delay)&#10;&#9;      &#9;&#9;∧ Vehicle_In = updatedVehicleFronts∼[Tunnel]&#10;&#9;      &#9;&#9;∧ Vehicle_Out = Vehicle∖  Vehicle_In&#10;&#9;      &#9;&#9;∧ newVehicleSpeeds ∈ Vehicle_In → ℕ&#10;&#9;      &#9;&#9;∧ (∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx) ∈ 0‥Speed_Limit(updatedVehicleFronts(xx))))&#10;&#9;      &#9;&#9;∧ newTravelLanes ∈ Vehicle_In →TUNNEL_TRAVEL_LANE&#10;&#9;      &#9;&#9;∧ newVehicleFronts = Vehicle_Out⩤updatedVehicleFronts&#10;&#9;      &#9;&#9;∧ trafficLevel ∈ TRAFFIC_LEVEL&#10;&#9;      &#9;&#9;∧ (trafficLevel = NORMAL ⇒ (((card(Vehicle_In) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION)  &lt; 40 ∧ ( ∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx)  ≥ 40) ) ) )&#10;&#9;      &#9;&#9;∧ (trafficLevel = DENSE ⇒ (((card(Vehicle_In) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION)  &lt; 40 ∧ ( ∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx)  ∈ 35‥39) ) ) )&#10;&#9;      &#9;&#9;∧ (trafficLevel = SLOWED ⇒ (((card(Vehicle_In) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION)  &gt; 40 ∧ ( ∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx)  ∈ 25‥34) ) ) )&#10;&#9;      &#9;&#9;∧ (trafficLevel = CONGESTION ⇒ (((card(Vehicle_In) ∗ 100)  ÷ MAXIMAL_TUNNEL_OCCUPATION)  &gt; 40 ∧ ( ∀xx·(xx ∈ Vehicle_In ⇒ newVehicleSpeeds(xx)  &lt; 15) ) ) )&#10;&#9;      &#9;&#9;∧ (∀ xx·((xx ∈ Vehicle_In ∧ newVehicleFronts(xx)  ∈ Tunnel_part1)  ⇒ newTravelLanes(xx)  = TRAVEL_LANE_I))&#10;&#9;      &#9;&#9;∧ (∀xx1, xx2·((xx1 ∈ Vehicle_In ∧ xx2 ∈ Vehicle_In ∧ xx1 ≠ xx2)  ⇒ ((newVehicleFronts(xx1)  − Vehicle_Length(xx1) ) ‥newVehicleFronts(xx1)  ∩ (newVehicleFronts(xx2)  − Vehicle_Length(xx2) ) ‥newVehicleFronts(xx2)  =  ∅  ∨ newTravelLanes(xx1)  ≠ newTravelLanes(xx2) ) ))&#10;&#9;      &#9;)&#10;      &#9;&#9;⇒ (TRUE=TRUE))" org.eventb.core.theorem="true"/>
</org.eventb.core.machineFile>
