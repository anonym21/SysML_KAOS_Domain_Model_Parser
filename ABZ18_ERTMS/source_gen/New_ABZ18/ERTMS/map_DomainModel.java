package New_ABZ18.ERTMS;

/*Generated by MPS */

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.FileNotFoundException;

public class map_DomainModel {
  public static String EVENT_B_MODELS_DIR_NAME = "Event_B_Models/";
  public static String EVENT_B_MODELS_FILE_EXTENSION = ".sys";

  public static void main(String[] args) {
    File eventBModelFile = new File(new File(map_DomainModel.class.getProtectionDomain().getCodeSource().getLocation().getFile()).getParentFile(), EVENT_B_MODELS_DIR_NAME + "ertms_etcs_case_study_ref_2" + EVENT_B_MODELS_FILE_EXTENSION);
    if (!(eventBModelFile.getParentFile().exists())) {
      eventBModelFile.getParentFile().mkdirs();
    }
    if (eventBModelFile.exists()) {
      eventBModelFile.delete();
    }
    try {
      eventBModelFile.createNewFile();
    } catch (IOException e) {
      e.printStackTrace();
    }



    System.out.println("Path to Event-B Model File corresponding to " + "ertms_etcs_case_study_ref_2" + " : " + eventBModelFile);
    try {
      PrintWriter pw = new PrintWriter(eventBModelFile);


      pw.println("/* " + "ertms_etcs_case_study_ref_2" + "\n* Author: SysML/KAOS Domain Model Parser\n* Creation date: " + new SimpleDateFormat("dd/MM/yyyy").format(new Date()) + "\n*/");
      pw.println("\nREFINEMENT\nertms_etcs_case_study_ref_2");
      pw.println("REFINES\nertms_etcs_case_study_ref_1");

      pw.println("\nSETS");
      pw.println("TTD; VSS; VSS_STATES={OCCUPIED, FREE, UNKNOW, AMBIGUOUS}; TTD_STATES={OCCUPIED_T, FREE_T}");

      pw.println("\nCONSTANTS");
      pw.println("T_stateTTD, T_stateVSS");

      pw.println("\nVARIABLES");
      pw.println("stateTTD, stateVSS");

      pw.println("\nPROPERTIES");
      pw.println(" &\nT_stateTTD = TTD --> TTD_STATES &\nT_stateVSS = VSS --> VSS_STATES &\n//predicate axiom1\n((TTD <: POW1(WAY))) &\n//predicate axiom2\n((union(TTD) = WAY)) &\n//predicate axiom3\n((inter(TTD) = {})) &\n//predicate axiom4\n!(ttd). ((ttd : TTD)) => ((bbl#p,q.(p..q<:WAY & p<q & ttd=p..q)))) &\n//predicate axiom5\n((VSS <: POW1(WAY))) &\n//predicate axiom6\n((union(VSS) = WAY)) &\n//predicate axiom7\n((inter(VSS) = {})) &\n//predicate axiom8\n!(vss). ((vss : VSS)) => ((bbl#p,q,ttd.(ttd : TTD & p..q<:ttd & p<q & vss=p..q)))) &\n//predicate inv2_5\n!(tr1, tr2). ((tr1 : dom(rear)) /\\ (tr2 : dom(rear)) /\\ (tr1 /= tr2)) => ((bbl(rear(tr1)..front(tr1))/\(rear(tr2)..front(tr2))={})) &\n//predicate inv2_6\n!(tr1, tr2). ((tr1 : dom(rear)) /\\ (tr2 : dom(front)\dom(rear)) /\\ (tr1 /= tr2)) => ((bblfron(tr2)<rear(tr1))) &\n//predicate inv2_7\n!(tr1, tr2, ttd). ((tr1 : dom(front)\dom(rear)) /\\ (tr2 : dom(front)\dom(rear)) /\\ (tr1 /= tr2) /\\ (ttd : TTD) /\\ (front(tr1) : ttd)) => ((bblfron(tr2) /: ttd))");

      pw.println("\nINVARIANT");
      pw.println("stateTTD : T_stateTTD &\nstateVSS : T_stateVSS &\n//predicate inv2_3\n!(ttd, tr). ((tr : dom(front) \ dom(rear)) /\\ (ttd : TTD) /\\ (front(tr) : ttd)) => ((ttd |-> OCCUPIED_T : stateTTD)) &\n//predicate inv2_4\n!(ttd, tr). ((tr : dom(rear)) /\\ (ttd : TTD) /\\ ((rear(tr)..front(tr))/\ttd /= {})) => ((ttd |-> OCCUPIED_T : stateTTD))");

      pw.println("\nINITIALISATION");
      pw.println("");


      pw.println("\n\nEND");
      pw.close();

    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }



  }
}
