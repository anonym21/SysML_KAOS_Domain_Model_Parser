package Tacos_project.Localisation_Component;

/*Generated by MPS */

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.FileNotFoundException;

public class map_DomainModel {
  public static String EVENT_B_MODELS_DIR_NAME = "Event_B_Models/";
  public static String EVENT_B_MODELS_FILE_EXTENSION = ".sys";

  public static void main(String[] args) {
    File eventBModelFile = new File(new File(map_DomainModel.class.getProtectionDomain().getCodeSource().getLocation().getFile()).getParentFile(), EVENT_B_MODELS_DIR_NAME + "localisation_component_ref1" + EVENT_B_MODELS_FILE_EXTENSION);
    if (!(eventBModelFile.getParentFile().exists())) {
      eventBModelFile.getParentFile().mkdirs();
    }
    if (eventBModelFile.exists()) {
      eventBModelFile.delete();
    }
    try {
      eventBModelFile.createNewFile();
    } catch (IOException e) {
      e.printStackTrace();
    }



    System.out.println("Path to Event-B Model File corresponding to " + "localisation_component_ref1" + " : " + eventBModelFile);
    try {
      PrintWriter pw = new PrintWriter(eventBModelFile);


      pw.println("/* " + "localisation_component_ref1" + "\n* Author: SysML/KAOS Domain Model Parser\n* Creation date: " + new SimpleDateFormat("dd/MM/yyyy").format(new Date()) + "\n*/");
      pw.println("\nREFINEMENT\nlocalisation_component_ref1");
      pw.println("REFINES\nlocalisation_component_ref0");

      pw.println("\nSETS");
      pw.println("SubComponent; Sensor");

      pw.println("\nCONSTANTS");
      pw.println("W1, G1, A1, S1, T_vehicle_subcomponents, vehicle_subcomponents, T_vehicle_sensors, vehicle_sensors, T_raw_locations, T_validated_locations");

      pw.println("\nVARIABLES");
      pw.println("raw_locations, validated_locations");

      pw.println("\nPROPERTIES");
      pw.println("W1 : SubComponent &\nG1 : SubComponent &\nSubComponent = {W1, G1} &\nA1 : Sensor &\nS1 : Sensor &\nSensor = {A1, S1} &\nT_vehicle_subcomponents = Vehicle <-> SubComponent &\nvehicle_subcomponents : T_vehicle_subcomponents &\n!xx. (xx : dom(vehicle_subcomponents) => card(vehicle_subcomponents[{xx}]) = 1) &\n!xx. (xx : ran(vehicle_subcomponents) => card(vehicle_subcomponents~[{xx}]) >= 1) &\nvehicle_subcomponents = {V1|->G1, V1|->W1} &\nT_vehicle_sensors = Vehicle <-> Sensor &\nvehicle_sensors : T_vehicle_sensors &\n!xx. (xx : dom(vehicle_sensors) => card(vehicle_sensors[{xx}]) = 1) &\n!xx. (xx : ran(vehicle_sensors) => card(vehicle_sensors~[{xx}]) >= 1) &\nvehicle_sensors = {V1|->A1, V1|->S1} &\nT_raw_locations = SubComponent <-> Localization &\nT_validated_locations = SubComponent <-> Localization");

      pw.println("\nINVARIANT");
      pw.println("raw_locations : T_raw_locations &\n!xx. (xx : ran(raw_locations) => card(raw_locations~[{xx}]) : 0..1) &\n!xx. (xx : dom(raw_locations) => card(raw_locations[{xx}]) >= 0) &\nvalidated_locations : T_validated_locations &\nvalidated_locations <: raw_locations &\n!xx. (xx : ran(validated_locations) => card(validated_locations~[{xx}]) : 0..1) &\n!xx. (xx : dom(validated_locations) => card(validated_locations[{xx}]) >= 0)");

      pw.println("\nINITIALISATION");
      pw.println("");


      pw.println("\n\nEND");
      pw.close();

    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }



  }
}
