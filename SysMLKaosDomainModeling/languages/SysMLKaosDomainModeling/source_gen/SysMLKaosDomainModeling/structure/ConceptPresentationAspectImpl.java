package SysMLKaosDomainModeling.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Atom = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Attribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttributeMaplet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Body = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Cardinality = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Concept = new ConceptPresentationBuilder().shortDesc("an entity").create();
  private final ConceptPresentation props_CustomDataSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DataSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DataValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultDataSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DomainCardinality = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DomainModel = new ConceptPresentationBuilder().shortDesc("a domain model").create();
  private final ConceptPresentation props_EnumeratedDataSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Head = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Individual = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Predicate = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RangeCardinality = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Relation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RelationMaplet = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Atom:
        return props_Atom;
      case LanguageConceptSwitch.Attribute:
        return props_Attribute;
      case LanguageConceptSwitch.AttributeMaplet:
        return props_AttributeMaplet;
      case LanguageConceptSwitch.Body:
        return props_Body;
      case LanguageConceptSwitch.Cardinality:
        return props_Cardinality;
      case LanguageConceptSwitch.Concept:
        return props_Concept;
      case LanguageConceptSwitch.CustomDataSet:
        return props_CustomDataSet;
      case LanguageConceptSwitch.DataSet:
        return props_DataSet;
      case LanguageConceptSwitch.DataValue:
        return props_DataValue;
      case LanguageConceptSwitch.DefaultDataSet:
        return props_DefaultDataSet;
      case LanguageConceptSwitch.DomainCardinality:
        return props_DomainCardinality;
      case LanguageConceptSwitch.DomainModel:
        return props_DomainModel;
      case LanguageConceptSwitch.EnumeratedDataSet:
        return props_EnumeratedDataSet;
      case LanguageConceptSwitch.Head:
        return props_Head;
      case LanguageConceptSwitch.Individual:
        return props_Individual;
      case LanguageConceptSwitch.Predicate:
        return props_Predicate;
      case LanguageConceptSwitch.RangeCardinality:
        return props_RangeCardinality;
      case LanguageConceptSwitch.Relation:
        return props_Relation;
      case LanguageConceptSwitch.RelationMaplet:
        return props_RelationMaplet;
    }
    return null;
  }
}
