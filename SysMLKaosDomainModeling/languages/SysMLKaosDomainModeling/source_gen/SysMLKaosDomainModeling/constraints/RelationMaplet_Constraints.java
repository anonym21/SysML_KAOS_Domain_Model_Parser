package SysMLKaosDomainModeling.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.apache.log4j.Level;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.scope.SimpleRoleScope;
import jetbrains.mps.smodel.SNodePointer;

public class RelationMaplet_Constraints extends BaseConstraintsDescriptor {
  private static final Logger LOG = LogManager.getLogger(RelationMaplet_Constraints.class);
  public RelationMaplet_Constraints() {
    super(MetaAdapterFactory.getConcept(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f581469498373L, "SysMLKaosDomainModeling.structure.RelationMaplet"));
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(MetaAdapterFactory.getReferenceLink(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f581469498373L, 0x506f58146949838fL, "antecedent"), new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f581469498373L, 0x506f58146949838fL), this) {
      @Override
      public boolean hasOwnOnReferenceSetHandler() {
        return true;
      }
      @Override
      public boolean validate(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode) {
        return true;
      }
      @Override
      public void onReferenceSet(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode) {
        int i = 0;
        for (SNode e : ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(SNodeOperations.getParent(referenceNode), MetaAdapterFactory.getConcept(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, "SysMLKaosDomainModeling.structure.Relation")), MetaAdapterFactory.getContainmentLink(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, 0x506f581469498397L, "maplets")))) {
          if (SLinkOperations.getTarget(e, MetaAdapterFactory.getReferenceLink(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f581469498373L, 0x506f58146949838fL, "antecedent")) == newReferentNode) {
            i++;
          }
        }
        if (i < SPropertyOperations.getInteger(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(referenceNode), MetaAdapterFactory.getConcept(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, "SysMLKaosDomainModeling.structure.Relation")), MetaAdapterFactory.getContainmentLink(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, 0x506f581469498363L, "domainCardinality")), MetaAdapterFactory.getProperty(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f5814694982a3L, 0x506f5814694982bfL, "minCardinality"))) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LoggingRuntime.legacyLog(Level.ERROR, "please provide more maplets with this element as antecedent to match the relation domain min cardinality", RelationMaplet_Constraints.class, null);
          }
          return;

        }

        if (SPropertyOperations.getInteger(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(referenceNode), MetaAdapterFactory.getConcept(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, "SysMLKaosDomainModeling.structure.Relation")), MetaAdapterFactory.getContainmentLink(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, 0x506f581469498363L, "domainCardinality")), MetaAdapterFactory.getProperty(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f5814694982a3L, 0x506f5814694982c2L, "maxCardinality")) != -1 && i > SPropertyOperations.getInteger(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(referenceNode), MetaAdapterFactory.getConcept(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, "SysMLKaosDomainModeling.structure.Relation")), MetaAdapterFactory.getContainmentLink(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, 0x506f581469498363L, "domainCardinality")), MetaAdapterFactory.getProperty(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f5814694982a3L, 0x506f5814694982c2L, "maxCardinality"))) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LoggingRuntime.legacyLog(Level.ERROR, "Error : if you add another maplet with this element as antecedent, the relation domain max cardinality constraint will not  hold !", RelationMaplet_Constraints.class, null);
          }
          SLinkOperations.setTarget(referenceNode, MetaAdapterFactory.getReferenceLink(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f581469498373L, 0x506f58146949838fL, "antecedent"), oldReferentNode);

        }

      }
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_fnvbqh_a0a0a0a0a4a0b0a1a2;
          }
          @Override
          public Scope createScope(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return SimpleRoleScope.forNamedElements(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getReferenceNode()), MetaAdapterFactory.getConcept(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, "SysMLKaosDomainModeling.structure.Relation")), MetaAdapterFactory.getReferenceLink(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, 0x506f58146949829bL, "domain")), MetaAdapterFactory.getContainmentLink(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f581469497f85L, 0x506f5814694983aeL, "individuals"));
          }
        };
      }
    });
    references.put(MetaAdapterFactory.getReferenceLink(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f581469498373L, 0x506f581469498392L, "image"), new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f581469498373L, 0x506f581469498392L), this) {
      @Override
      public boolean hasOwnOnReferenceSetHandler() {
        return true;
      }
      @Override
      public boolean validate(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode) {
        return true;
      }
      @Override
      public void onReferenceSet(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode) {
        int i = 0;
        for (SNode e : ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(SNodeOperations.getParent(referenceNode), MetaAdapterFactory.getConcept(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, "SysMLKaosDomainModeling.structure.Relation")), MetaAdapterFactory.getContainmentLink(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, 0x506f581469498397L, "maplets")))) {
          if (SLinkOperations.getTarget(e, MetaAdapterFactory.getReferenceLink(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f581469498373L, 0x506f581469498392L, "image")) == newReferentNode) {
            i++;
          }
        }
        if (i < SPropertyOperations.getInteger(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(referenceNode), MetaAdapterFactory.getConcept(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, "SysMLKaosDomainModeling.structure.Relation")), MetaAdapterFactory.getContainmentLink(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, 0x506f58146949836aL, "rangeCardinality")), MetaAdapterFactory.getProperty(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f5814694982a3L, 0x506f5814694982bfL, "minCardinality"))) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LoggingRuntime.legacyLog(Level.ERROR, "please provide more maplets with this element as image to match the relation range min cardinality", RelationMaplet_Constraints.class, null);
          }
          return;
        }

        if (SPropertyOperations.getInteger(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(referenceNode), MetaAdapterFactory.getConcept(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, "SysMLKaosDomainModeling.structure.Relation")), MetaAdapterFactory.getContainmentLink(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, 0x506f58146949836aL, "rangeCardinality")), MetaAdapterFactory.getProperty(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f5814694982a3L, 0x506f5814694982c2L, "maxCardinality")) != -1 && i > SPropertyOperations.getInteger(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(referenceNode), MetaAdapterFactory.getConcept(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, "SysMLKaosDomainModeling.structure.Relation")), MetaAdapterFactory.getContainmentLink(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, 0x506f58146949836aL, "rangeCardinality")), MetaAdapterFactory.getProperty(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f5814694982a3L, 0x506f5814694982c2L, "maxCardinality"))) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LoggingRuntime.legacyLog(Level.ERROR, "Error : if you add another maplet with this element as image, the relation range max cardinality constraint will not  hold !", RelationMaplet_Constraints.class, null);
          }
          SLinkOperations.setTarget(referenceNode, MetaAdapterFactory.getReferenceLink(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f581469498373L, 0x506f581469498392L, "image"), oldReferentNode);

        }
      }
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_fnvbqh_a0a0a0a0a4a0b0a2a2;
          }
          @Override
          public Scope createScope(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return SimpleRoleScope.forNamedElements(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getReferenceNode()), MetaAdapterFactory.getConcept(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, "SysMLKaosDomainModeling.structure.Relation")), MetaAdapterFactory.getReferenceLink(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f58146949824cL, 0x506f58146949829eL, "range")), MetaAdapterFactory.getContainmentLink(0x9715e310dbcb448eL, 0x93035bfaafdcf84dL, 0x506f581469497f85L, 0x506f5814694983aeL, "individuals"));
          }
        };
      }
    });
    return references;
  }
  private static SNodePointer breakingNode_fnvbqh_a0a0a0a0a4a0b0a1a2 = new SNodePointer("r:fe29ccbb-7e61-4fdd-9719-8bc60c7c67be(SysMLKaosDomainModeling.constraints)", "5795948090140314922");
  private static SNodePointer breakingNode_fnvbqh_a0a0a0a0a4a0b0a2a2 = new SNodePointer("r:fe29ccbb-7e61-4fdd-9719-8bc60c7c67be(SysMLKaosDomainModeling.constraints)", "5795948090140316265");
}
