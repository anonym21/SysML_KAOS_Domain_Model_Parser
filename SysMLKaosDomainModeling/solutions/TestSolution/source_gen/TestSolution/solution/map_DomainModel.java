package TestSolution.solution;

/*Generated by MPS */

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.FileNotFoundException;

public class map_DomainModel {
  public static String EVENT_B_MODELS_DIR_NAME = "Event_B_Models/";
  public static String EVENT_B_MODELS_FILE_EXTENSION = ".sys";

  public static void main(String[] args) {
    File eventBModelFile = new File(new File(map_DomainModel.class.getProtectionDomain().getCodeSource().getLocation().getFile()).getParentFile(), EVENT_B_MODELS_DIR_NAME + "lg_system_ref_0" + EVENT_B_MODELS_FILE_EXTENSION);
    if (!(eventBModelFile.getParentFile().exists())) {
      eventBModelFile.getParentFile().mkdirs();
    }
    if (eventBModelFile.exists()) {
      eventBModelFile.delete();
    }
    try {
      eventBModelFile.createNewFile();
    } catch (IOException e) {
      e.printStackTrace();
    }

    System.out.println("Path to Event-B Model File corresponding to " + "lg_system_ref_0" + " : " + eventBModelFile);
    try {
      PrintWriter pw = new PrintWriter(eventBModelFile);


      pw.println("/* " + "lg_system_ref_0" + "\n* Author: SysML/KAOS Domain Model Parser\n* Creation date: " + new SimpleDateFormat("dd/MM/yyyy").format(new Date()) + "\n*/");
      pw.println("\nSYSTEM\nlg_system_ref_0");
      pw.println("");

      pw.println("\nSETS");
      pw.println("LandingGear; LandingSet; DATA_SET_1={lg_extended, lg_retracted}");

      pw.println("\nCONSTANTS");
      pw.println("LG1, LS1, LS2, LS3, T_re, re, T_landingGearState");

      pw.println("\nVARIABLES");
      pw.println("landingGearState");

      pw.println("\nPROPERTIES");
      pw.println("LG1 : LandingGear &\nLandingGear = {LG1} &\nLS1 : LandingSet &\nLS2 : LandingSet &\nLS3 : LandingSet &\nLandingSet = {LS1, LS2, LS3} &\nT_re = LandingSet <-> LandingGear &\nre : T_re &\n!xx. (xx : ran(re) => card(re~[{xx}]) = 2) &\n!xx. (xx : dom(re) => card(re[{xx}]) >= 0) &\nre = {LS1|->LG1, LS1|->LG1, LS2|->LG1} &\nT_landingGearState = LandingSet --> DATA_SET_1");

      pw.println("\nINVARIANT");
      pw.println("landingGearState : T_landingGearState &\n//predicate p1\n!(x1, x2, x3). ((x1 : LandingGear) /\\ (x2 : DATA_SET_1) /\\ (x1 |-> x3 : landingGearState)) => ((x2 |-> x3 : landingGearState)) &\n//predicate p2\n!(x4, x5). ((x4 |-> x5 : landingGearState))");

      pw.println("\nINITIALISATION");
      pw.println("landingGearState := {LS3|->lg_extended}");


      pw.println("\n\nEND");
      pw.close();

    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }



  }
}
